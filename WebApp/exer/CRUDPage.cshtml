@{
    Layout = "~/_Layout.cshtml";
    Page.Title = string.Format("Razor - {0}", "CRUD - Insert");

    //consider your need for global variables
    var title = "";
    var Artistid = "0";

    var ReleaseYear = "";
    var ReleaseLabel = "";




    //obtain two lists: artistlist and CategoryList
    var db = Database.Open("chinook");
    var supplierquery = @"SELECT Artistid, Name
FROM artists
Order by name";

    var artistlist = db.Query(supplierquery);


    //these are validator controls execute on the server side

    Validation.Add("title",
         Validator.Required("Title is required"),
          Validator.StringLength(160, 1, "T is limited to 160 characters"));

    //ReleaseYear is nullable which means 0 required characters
    Validation.Add("ReleaseYear",
         
    Validator.Range(1950,DateTime.Today.Year, "select from 1950 to todays date"));

    Validation.Add("ReleaseLabel",
         Validator.StringLength(50, 0, "Release Label is limited to 40 characters"));
   
    
    
    //Validator.Decimal("Unit price is a money field."),
    //Validator.Range(0.00, double.MaxValue, "Unit price must be 0.00 or more"));







    //compare two fields together (ie password)
    //Validation.Add("ConfirmPassword",
    //    Validator.Required("Missing confirm password"),
    //      Validator.StringLength(160, 1, "Confirm password is too long"),
    //      Validator.EqualsTo("Password", "Password not confirmed"));

    //pattern testing (ie PostalCode)
    //Validation.Add("PostalCode",
    //     Validator.Regex(@"^[A-Za-z][0-9][A-Za-z][0-9][A-Za-z][0-9]$",
    //     "Postal Code format invalid (T7T7T7"));
}
@section head{
    <link href="~/Content/MySpacing.css" rel="stylesheet" />
}

@section banner{
    <h1>Database: CRUD Product - Insert</h1>
}

@if (IsPost)
{
    // retreive the data from the form
    title = Request.Form["title"];
    Artistid = Request.Form["artistlist"];
   
    ReleaseYear = Request.Form["ReleaseYear"];
    ReleaseLabel = Request.Form["ReleaseLabel"];
    
  
  
    var thebutton = Request.Form["FormButton"];

    //when you have multiple buttons, a good practice is to determine
    //    what action to do for the press button FIRST!
    if (thebutton.Equals("Clear"))
    {
        //empty the form fields
        title = "";
        Artistid = "0";
       
        ReleaseYear = "";
        ReleaseLabel = "";
     
        
        
    }
    else
    {
        //Validation of data
        //Validation.IsValid() is used to execute the server side validation
        //the if statement DOES NOT need an else as the Validation control
        //      message will appear in your Summary() or Message() controls
        if (Validation.IsValid())
        {
            //you may have logical validation needed for your data that cannot
            //be accomplished using Validation Controls or HTML5
            //this type of validation is a programmed validation

            //assume that the categoryid is a required field
            var valid = true;
            
            //check validation result
            if (valid)
            {
                //good data
                try
                {
                    //connect to the database
                    //  done above
                    //create sql command
                    var inscommand = @"INSERT INTO albums (title, Artistid, 
    ReleaseYear, ReleaseLabel)
    VALUES(@0, @1, @2, @3)";
                    //execute the command
                    db.Execute(inscommand, title,
                        Artistid.Equals("0") ? null : Artistid,
                       
                        string.IsNullOrEmpty(ReleaseYear) ? null : ReleaseYear,
                        string.IsNullOrEmpty(ReleaseLabel) ? null : ReleaseLabel  );
                    <div class="col-12 text-center">
                        <p style="color:green">
                            Product has been added
                        </p>
                    </div>
                }
                catch (Exception ex)
                {
                    <div class="col-12 text-center">
                        <p style="color:firebrick; font-size:large">
                            Processing error: @ex.Message
                        </p>
                    </div>
                }
            }

        }

    }

}
else
{

}
@* there are two ways to display your validation errors
    a) using the ValidationSummary()
        - bulleted list of all errors in all fields
    b) using the ValidationMessage()
        - placed beside the actual control field
        - display only the 1st error of field*@

@Html.ValidationSummary()
<form id="theform" method="post">
    <div class="row">
        <div class="col-md-6 text-right">

            <label for="title">Name:</label><br />
            <label for="Artistid">Supplier:</label><br />
            
            <label for="ReleaseYear">ReleaseYear:</label><br />
            <label for="ReleaseLabel">Price:</label><br />
           
          
            
            <br />
        </div>
        <div class="col-me-6 text-left">

            <input type="text" value="@title"
                   id="title" name="title" required />
            @* using ValidationMessage("controlname") *@
            @Html.ValidationMessage("title")
            <br />
            <select id="artistlist" name="artistlist">
                <option value="0">select supplier...</option>
                @foreach (var item in artistlist)
                {
                    //for the select control, the default display on an event
                    //   is the 1st option tag
                    //to retain the option selected between posts, you need to
                    //   set the selected option using the attribute selected
                    if (Artistid == item.Artistid.ToString())
                    {
                        <option value="@item.Artistid" selected>@item.Name</option>
                    }
                    else
                    {
                        <option value="@item.Artistid">@item.Name</option>
                    }

                }
            </select>
            <br />
       
            <input type="number" id="ReleaseYear" name="ReleaseYear"
                   value="@ReleaseYear" min="1950" max= "2100" step="1" /><br />
            <input type="text" id="ReleaseLabel" name="ReleaseLabel"
                   value="@ReleaseLabel" /><br />



            <br />
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 text-center">
            <input type="submit" id="FormButton" name="FormButton"
                   class="btn btn-primary" value="Add" />
            <input type="submit" id="FormButton" name="FormButton" formnovalidate
                   class="btn" value="Clear" />
        </div>
    </div>
</form>
